---
grails:
    profile: web
    codegen:
        defaultPackage: cytomine.core
    spring:
        transactionManagement:
            proxies: false
info:
    app:
        name: '@info.app.name@'
        version: '@info.app.version@'
        grailsVersion: '@info.app.grailsVersion@'
        #Cytomine Version
        cytomineVersion: 20190222
spring:
    groovy:
        template:
            check-template-location: false
# Spring Actuator Endpoints are Disabled by Default
endpoints:
    enabled: false
    jmx:
        enabled: true

---
grails:
    mime:
        disable:
            accept:
                header:
                    userAgents:
                        - Gecko
                        - WebKit
                        - Presto
                        - Trident
        types:
            all: '*/*'
            atom: application/atom+xml
            css: text/css
            csv: text/csv
            form: application/x-www-form-urlencoded
            html:
              - text/html
              - application/xhtml+xml
            js: text/javascript
            json:
              - application/json
              - text/json
            jsonp: application/javascript
            multipartForm: multipart/form-data
            pdf: application/pdf
            rss: application/rss+xml
            text: text/plain
            hal:
              - application/hal+json
              - application/hal+xml
            xml:
              - text/xml
              - application/xml
            png: image/png
            jpg: image/jpeg
        file:
            extensions: true
        use:
            accept:
                header: false

    urlmapping:
        cache:
            maxsize: 1000
    controllers:
        defaultScope: singleton
    converters:
        encoding: UTF-8
        json :
            default:
                deep: false
    views:
        default:
            codec: none
        gsp:
            encoding: UTF-8
            htmlcodec: xml
            sitemesh :
                preprocess : true
            codecs:
                expression: html
                scriptlets: html
                taglib: none
                staticparts: none
    project:
        groupId : appName
    databinding:
        convertEmptyStringsToNull: false

    scaffolding:
        templates:
            domainSuffix: Instance
    json:
        legacy:
            builder: false
    enable:
        native2ascii: true
    logging:
        jul:userbridge: true
    spring:
        bean:
            packages: []

endpoints:
    jmx:
        unique-names: true

---
hibernate:
    cache:
        use_second_level_cache: true
        use_query_cache: false
        region:
            factory_class: 'org.hibernate.cache.ehcache.EhCacheRegionFactory'
    singleSession: true

dataSource:
    pooled: true
    driverClassName: 'org.postgresql.Driver'
    username: postgre
    dialect: org.hibernate.spatial.dialect.postgis.PostgisDialect


environments:
    scratch:
        dataSource:
            dbCreate: 'update'
            url: 'jdbc:postgresql://localhost:5432/cytomineempty'
            password: 'postgres'
            properties:
                jmxEnabled: true
                initialSize: 10
                maxActive: 500
                minIdle: 10
                maxIdle: 500
                maxWait: 30000
                maxAge: 300000
                timeBetweenEvictionRunsMillis: 5000
                minEvictableIdleTimeMillis: 60000
    development:
        dataSource:
            dbCreate: 'update'
            url: 'jdbc:postgresql://localhost:5432/docker'
            username: 'docker'
            password: 'docker'
            properties:
                jmxEnabled: true
                initialSize: 10
                maxActive: 500
                minIdle: 10
                maxIdle: 500
                maxWait: 30000
                maxAge: 300000
                timeBetweenEvictionRunsMillis: 5000
                minEvictableIdleTimeMillis: 60000
    test:
        dataSource:
            dbCreate: 'create'
            url: 'jdbc:postgresql://localhost:5432/docker'
            username: 'docker'
            password: 'docker'
            properties:
                jmxEnabled: true
                initialSize: 10
                maxActive: 500
                minIdle: 10
                maxIdle: 500
                maxWait: 30000
                maxAge: 300000
                timeBetweenEvictionRunsMillis: 5000
                minEvictableIdleTimeMillis: 60000
    production:
        dataSource:
            dbCreate: 'update'
            url: 'jdbc:postgresql://localhost:5432/docker'
            username: 'docker'
            password: 'docker'
            properties:
                jmxEnabled: true
                initialSize: 10
                maxActive: 500
                minIdle: 10
                maxIdle: 500
                maxWait: 30000
                maxAge: 300000
                timeBetweenEvictionRunsMillis: 5000
                minEvictableIdleTimeMillis: 60000
    perf:
        dataSource:
            dbCreate: 'update'
            url: 'jdbc:postgresql://localhost:5433/cytomineperf'
            password: 'postgres'
            properties:
                jmxEnabled: true
                initialSize: 10
                maxActive: 500
                minIdle: 10
                maxIdle: 500
                maxWait: 30000
                maxAge: 300000
                timeBetweenEvictionRunsMillis: 5000
                minEvictableIdleTimeMillis: 60000
    testrun:
        dataSource:
            dbCreate: 'create'
            url: 'jdbc:postgresql://localhost:5432/cytominetestrun'
            password: 'postgres'
            properties:
                jmxEnabled: true
                initialSize: 10
                maxActive: 500
                minIdle: 10
                maxIdle: 500
                maxWait: 30000
                maxAge: 300000
                timeBetweenEvictionRunsMillis: 5000
                minEvictableIdleTimeMillis: 60000
#                validationQuery: SELECT 1
#                validationQueryTimeout: 3
#                validationInterval: 15000
#                testOnBorrow: true
#                testWhileIdle: true
#                testOnReturn: false
#                jdbcInterceptors: ConnectionState
#                defaultTransactionIsolation: 2 # TRANSACTION_READ_COMMITTED

grails:
    mongo:
        host: 'localhost'
        port: 27017
        databaseName: 'cytomine'
        options:
            connectionsPerHost: 10
            threadsAllowedToBlockForConnectionMultiplier: 5

---
##Grails Metadata file
##Tue Jul 28 09:34:33 CEST 2015
#app.context=/
#app.grails.version=2.4.4
#app.name=cytomine
#app.servlet.version=2.5
#cytomine:
#versionDate: 20190222
#app.version=1.3.5
---

#    dataSource {
#        pooled = true
#        driverClassName = "org.postgresql.Driver"
#        //    driverClassName = "com.p6spy.engine.spy.P6SpyDriver" // use this driver to enable p6spy logging
#        username = "postgres"
#        dialect = org.hibernate.spatial.dialect.postgis.PostgisDialect
#        properties {
#        //specifies that this tc Server is enabled to be monitored using JMX
#        jmxEnabled = true
#        //number of connections that are created when the pool is started
#        initialSize = 10
#        //maximum number of active connections that can be allocated from this pool at the same time
#        maxActive = 500
#        //minimum number of established connections that should be kept in the pool at all times
#        minIdle = 10
#        //maximum number of connections that should be kept in the pool at all times
#        maxIdle = 500
#        //maximum number of milliseconds that the pool will wait
#        maxWait = 30000
#        //Time in milliseconds to keep this connection
#        maxAge = 5 * 60000
#        //number of milliseconds to sleep between runs of the idle connection validation/cleaner thread
#        timeBetweenEvictionRunsMillis = 5000
#        //minimum amount of time an object may sit idle in the pool before it is eligible for eviction
#        minEvictableIdleTimeMillis = 60000
#}
#}
#        hibernate {
#        //  cache.use_second_level_cache = true
#        //  cache.use_query_cache = true
#        //    cache.use_second_level_cache = false
#        //    cache.use_query_cache = false   // Changed to false to be enable the distributed cache
#        //    cache.provider_class = 'net.sf.ehcache.hibernate.SingletonEhCacheProvider'
#
#        //CLUSTER
#        //    cache.provider_class = 'net.sf.ehcache.hibernate.EhCacheProvider'
#        //    cache.provider_class = 'net.sf.ehcache.hibernate.SingletonEhCacheProvider'
#        // hibernate.cache.region.factory_class = 'net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory'
#        cache.use_second_level_cache = true
#        cache.use_query_cache = false
#        //cache.region.factory_class = 'net.sf.ehcache.hibernate.EhCacheRegionFactory' // Hibernate 3
#        cache.region.factory_class = 'org.hibernate.cache.ehcache.EhCacheRegionFactory' // Hibernate 4
#        singleSession = true // configure OSIV singleSession mode
#}
#        // environment specific settings
#        environments {
#        scratch {
#        dataSource {
#        dbCreate = "update"
#        url = "jdbc:postgresql://localhost:5432/cytomineempty"
#        password = "postgres"
#}
#}
#        development {
#        dataSource {
#        dbCreate = "update"
#        url = "jdbc:postgresql://localhost:5432/docker"
#        username = "docker"
#        password = "docker"
#}
#}
#        test {
#        dataSource {
#        //loggingSql = true
#        dbCreate = "create"
#        url = "jdbc:postgresql://localhost:5432/docker"
#        username = "docker"
#        password = "docker"
#}
#}
#        production {
#        dataSource {
#        dbCreate = "update"
#        url = "jdbc:postgresql://postgresql:5432/docker"
#        username='docker'
#        password='docker'
#}
#}
#        perf {
#        dataSource {
#        //loggingSql = true
#        dbCreate = "update"
#        url = "jdbc:postgresql://localhost:5433/cytomineperf"
#        password = "postgres"
#}
#}
#        testrun {
#        dataSource {
#        //loggingSql = true
#        dbCreate = "create"
#        url = "jdbc:postgresql://localhost:5432/cytominetestrun"
#        password = "postgres"
#}
#}
#}
#        grails {
#        mongo {
#        host = "localhost"
#        port = 27017
#        databaseName = "cytomine"
#        options {
#        connectionsPerHost = 10 // The maximum number of connections allowed per host
#        threadsAllowedToBlockForConnectionMultiplier = 5 // so it*connectionsPerHost threads can wait for a connection
#}
#}
#}
#        /*
#        environments {
#        test {
#        grails {
#        mongo {
#        databaseName = "cytominetest"
#}
#}
#}
#}



